/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocomp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author Fredy-pc
 */
public class Interprete extends javax.swing.JFrame {

    /**
     * Creates new form Interprete
     */
    ArrayList<Character> chars = new ArrayList<Character>();
    int linea = 1;
    Token preanalisis = null;
    String lexema = "";
    StringBuilder sb = new StringBuilder();
    String content = "";
    String[] alfabeto = null;
    String[] estados = null;
    String[] palabrasRes = null;
    String[] estadosFinales = null;
    int cont = 0;
    boolean Error = false;
    ArrayList<Token> tokens = new ArrayList<Token>();
    File abre = null; 
    ArrayList<Transicion> transiciones = new ArrayList<Transicion>();
    int estadoActual = 0;
    public Interprete() {
        setExtendedState(MAXIMIZED_BOTH);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        resultado.setEditable(false);
        resultado.setColumns(20);
        resultado.setRows(5);
        jScrollPane2.setViewportView(resultado);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Cargar Lenguaje");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 324, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(68, 68, 68)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        automata();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cont = 0;
        estadoActual= 0;
        linea = 1;
        content = jTextArea1.getText() + " ";
        preanalisis = Preanalisis();
        this.resultado.setText("");
        Error = false;
        A();
        if(preanalisis.getToken() != "finFichero"){
            ErrorSintactico(preanalisis.lexema(), preanalisis.linea(), "Fin de Fichero");
        }
        if(!Error){
            this.resultado.setText("Interpretado correctamente");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interprete().setVisible(true);
                
            }
        });
        
        
    }
    
    //** AUTOMATA **\\
    public void automata(){
        String aux="";
        chars.clear();
        alfabeto = null;
        estados = null;
        estadosFinales = null;
        palabrasRes = null;
        transiciones.clear();
        this.resultado.setText("");
        //this.cadena.setText("");
        boolean AFD = true;
        int i = 0;
        try{
            File abre = new File("C:\\Users\\Fredy-pc\\Documents\\NetBeansProjects\\ProyectoComp\\src\\proyectocomp\\AutomataFinal.txt");
            if(abre != null){
                FileReader archivos=new FileReader(abre);
                BufferedReader lee=new BufferedReader(archivos);
                while((aux = lee.readLine()) != null){
                    switch (i) {
                        case 0:
                            //Alfabeto
                            alfabeto = aux.split(" ");
                            break;
                        case 1:
                            //Estados
                            estados = aux.split(" ");
                            break;
                        case 2:
                            //Estados finales
                            estadosFinales = aux.split(" ");
                            break;
                        case 3:
                            //Palabras Reservadas
                            palabrasRes = aux.split(" ");
                            break;
                        default:
                            //Transiciones
                            
                            String[] tran = aux.split(" ");
                            int actual = Integer.parseInt(tran[0]);
                            int siguiente = Integer.parseInt(tran[1]);
                            char simbolo = tran[2].charAt(0);
                            int retroceso = Integer.parseInt(tran[3]);
                            String nomToken = tran[4];
                            if(existe(actual,simbolo)){
                                System.out.println("ERROR: Automata no determinista: " + actual + simbolo);
                                AFD = false;
                                break;
                            }else{
                                this.transiciones.add(new Transicion(actual, siguiente, simbolo,retroceso,nomToken));
                            }
                            break;
                    }
                    i++;
                }
                if(AFD){
                    this.resultado.append("Automata correctamente ingresado");
                    //this.cadena.enable();
                }else{
                    this.resultado.append("Automata incorrecto");
                    //this.cadena.setText("");
                    //this.cadena.enable(false);
                }
                lee.close();
            }
        }catch(Exception e){
            System.out.println("Error: " + e); 
        }
    }
    public boolean existe(int actual, char simbolo){
        if(transiciones == null){
            return false;
        }else{
            for(Transicion e: transiciones){
                if(e.getActual() == actual && e.getSimbolo() == simbolo){
                    return true;
                }
            }
        }
        return false;
    }
    //** AUTOMATA **\\
    
    //** ANALIZADOR LEXICO **\\
    public Token Preanalisis(){
        aLexico();
        Token token = tokens.get(tokens.size() - 1);
        return token;
    } 
    public void aLexico(){
        if(cont < content.length()){
            char c = content.charAt(cont);
            if(Character.isDigit(c)){
                c = 'd';
            }else if(Character.isLetter(c)){
                c = 'l';
            }else if(Character.isWhitespace(c)){
                c = 'e';
                if(content.charAt(cont) == '\n' || content.charAt(cont) == '\r'){
                    linea++;
                }
            }
            estadoActual = existeTran(estadoActual,c);
            if(estadoActual == -2){
                this.resultado.setText("Error Léxico en la linea " + linea);
                System.out.println("Error en la linea: " + linea);
                tokens.add(new Token("Error", String.valueOf(c), linea));
                estadoActual = 0;
            }else{
                if(c != 'e'){
                    chars.add(content.charAt(cont));
                }
                if(esFinal(estadoActual)){
                    int r = retroceso(estadoActual);
                    String nomToken = nomToken(estadoActual);
                    cont = cont - r;
                    estadoActual = 0;
                    if(r != 0){
                        chars.remove(chars.size() - 1);
                    }
                    for(char a:chars){
                        sb.append(a);
                    }
                    lexema = sb.toString();
                    if(nomToken.equals("id")){
                       if(esReservada(lexema)){
                            nomToken = "Pr" + lexema;
                        }
                    }
                    Token token1 = new Token(nomToken, lexema, linea);
                    tokens.add(token1);
                    sb.setLength(0);
                    chars.clear();
                    cont++;
                }else{                    
                    cont++;
                    aLexico();
                }
            }
        }else{
            Token token1 = new Token("finFichero", "$", linea);
            tokens.add(token1);
        }
    }
    public boolean esReservada(String id){
        for(int i = 0; i <= palabrasRes.length -1;i++){
            if(id.equals(palabrasRes[i])){
                return true;
            }
        }
        return false;
    }
    public int retroceso(int estadoActual){
        for(Transicion e: transiciones){
                if(e.getActual() == estadoActual){
                    return e.getRetroceso();
                }
            }
        return 0;
    }
    public boolean esFinal(int estado){
        for(int i = 0; i <= estadosFinales.length - 1; i++){
            if(estado == Integer.parseInt(estadosFinales[i])){
                return true;
            }
        }
        return false;
    }
    public int existeTran(int actual, char simbolo){
        if(transiciones == null){
            System.out.println("NO hay");
        }else{
            for(Transicion e: transiciones){
                //System.out.println("---Actual: " + e.getActual() + " Simbolo: " +  e.getSimbolo());
                if(e.getActual() == actual && e.getSimbolo() == simbolo){
                    return e.getSiguiente();
                }
            }
        }
        return -2;
    }
    public String nomToken(int estadoActual){
        for(Transicion t: transiciones){
            if(t.getActual() == estadoActual){
                return t.nomToken();
            }
        }
        return "";
    }
    //** ANALIZADOR LEXICO **\\
    
    //** ANALIZADOR SINTACTICO **\\
    public void A(){
        if(!Error){
            if(preanalisis.getToken().equals("PrPROGRAMA")){
                Emparejar("PrPROGRAMA");
                Emparejar("id");           
                CONSTANTES();           
                ESTRUCTURAS();            
                Emparejar("PrINICIO");            
                INSTRUCCIONES();            
                Emparejar("PrFIN");
            }else{
                ErrorSintactico(preanalisis.lexema(), preanalisis.linea(), "PROGRAMA");
            }
        }
        
    }
    
    public void CONSTANTES(){
        if(!Error){
            if(preanalisis.getToken().equals("PrCONSTANTES")){
                Emparejar("PrCONSTANTES");
                Emparejar("id");
                Emparejar("asignacion");
                VALOR1();
                CONST();
            }else if(preanalisis.getToken().equals("PrESTRUCTURAS") || preanalisis.getToken().equals("PrINICIO")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "CONSTANTES, ESTRUCTURAS O INICIO");
            }
        }
    }
    public void CONST(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                Emparejar("asignacion");
                VALOR1();
                CONST();
            }else if(preanalisis.getToken().equals("PrESTRUCTURAS") || preanalisis.getToken().equals("PrINICIO")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, ESTRUCTURAS O INICIO");
            }
        }
    }
    public void VALOR1(){
        if(!Error){
            if(preanalisis.getToken().equals("num")){
                Emparejar("num");
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                CAR();
                Emparejar("comilla");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "número o comilla");
            }
        }
    }
    public void CAR(){
        if(!Error){
            if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num")){
                if(preanalisis.lexema().length() == 1){
                    preanalisis = Preanalisis();
                }else{
                    ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "caracter");
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
    }
    
    public void ESTRUCTURAS(){
        if(!Error){                    
            if(preanalisis.getToken().equals("PrESTRUCTURAS")){
                Emparejar("PrESTRUCTURAS");
                Emparejar("id");
                Emparejar("asignacion");
                Emparejar("lAbre");
                CAMPOS();
                Emparejar("lCierra");
                EST2();
            }else if(preanalisis.getToken().equals("PrINICIO")){   
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ESTRUCTURAS O INICIO");
            }        
        }
    }
    public void EST2(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
            Emparejar("id");
            ESTVAR();
            }else if(preanalisis.getToken().equals("PrINICIO")){  
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id O INICIO");
            }
        }
    }
    public void CAMPOS(){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
            TIPO();
            Emparejar("id");
            SEP();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO O CARACTER");
            }
        }
    }
    public void SEP(){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO2();
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                Emparejar("id");
                SEP2();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }    
        }
    }
    public void CAMPO2(){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
                TIPO();
                Emparejar("id");
                SEP3();
            }else if(preanalisis.getToken().equals("lCierra")){

            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER O }");
            }
        }
    }
    public void SEP2(){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO3();
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                Emparejar("id");
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void SEP3(){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO3();
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                Emparejar("id");
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void CAMPO3(){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
                TIPO();
                Emparejar("id");
                SEP3();
            }else if(preanalisis.getToken().equals("lCierra")){

            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER O }");
            }    
        }
    }
    public void TIPO(){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO")){
                Emparejar("PrENTERO");
            }else if(preanalisis.getToken().equals("PrAPUNTADOR")){
                Emparejar("PrAPUNTADOR");
            }else if(preanalisis.getToken().equals("PrCARACTER")){
                Emparejar("PrCARACTER");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER");
            }
        }
    }
    public void ESTVAR(){
        if(!Error){
            if(preanalisis.getToken().equals("asignacion")){
                Emparejar("asignacion");
                Emparejar("lAbre");
                CAMPOS();
                Emparejar("lCierra");
                VAR3();
            }else if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                VARIABLES();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "asignacion o id");
            }            
        }  
    }
    public void VAR3(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                Emparejar("id");
                VARIABLES();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
    }
    public void VARIABLES(){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa") || preanalisis.getToken().equals("coma")){
                VAR2();
                Emparejar("puntoComa");
                VARIABLES2();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void VAR2(){
        if(!Error){
            if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                Emparejar("id");
                VAR2();
            }else if( preanalisis.getToken().equals("puntoComa")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }   
        }
    }
    public void VARIABLES2(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                Emparejar("id");
                VAR2();
                Emparejar("puntoComa");
                VARIABLES2();
            }else if(preanalisis.getToken().equals("PrINICIO")){

            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "id O INICIO");
            }    
        }
    }
    
    public void INSTRUCCIONES(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI") || preanalisis.getToken().equals("PrMIENTRAS") || 
                    preanalisis.getToken().equals("PrESCRIBE") || preanalisis.getToken().equals("PrLEE") ||
                    preanalisis.getToken().equals("id")){
                INSTRUCCION();
                INSTRUCCIONES();
            }else if(preanalisis.getToken().equals("PrFIN") || preanalisis.getToken().equals("PrSINO")){

            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI, MIENTRAS, ESCRIBE, LEE, id o FIN");
            }    
        }
    }
    public void INSTRUCCION(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI")){
                SI();
            }else if(preanalisis.getToken().equals("PrMIENTRAS")){
                MIENTRAS();
            }else if(preanalisis.getToken().equals("PrESCRIBE")){
                ESCRIBE();
            }else if(preanalisis.getToken().equals("PrLEE")){
                LEE();
            }else if(preanalisis.getToken().equals("id")){
                EXP();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI, MIENTRAS, ESCRIBE, LEE, id o FIN");
            }    
        }
    }
    
    public void SI(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI")){
                Emparejar("PrSI");
                Emparejar("pAbre");
                CONDICION();
                Emparejar("pCierra");
                Emparejar("PrENTONCES");
                INSTRUCCIONES();
                SINO();
                Emparejar("PrFIN");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI");
            }
        }
    }
    public void SINO(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSINO")){
                Emparejar("PrSINO");
                INSTRUCCIONES();
            }else if(preanalisis.getToken().equals("PrFIN")){
                
            }
            else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SINO");
            }    
        }
    }
    
    public void CONDICION(){
        if(!Error){
        if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num") || preanalisis.getToken().equals("'")){
                VARCON();
                CONDICIONAL();
                VARCON();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, num, o '");   
            }   
        }
    }
    public void VARCON(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                AP();
            }else if(preanalisis.getToken().equals("num")){
                Emparejar("num");
            }else if(preanalisis.getToken().equals("'")){
                Emparejar("comilla");
                CAR();
                Emparejar("comilla");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, num, o '");   
            }   
        }
    }
    public void AP(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");
               Emparejar("id");
           }else if(preanalisis.getToken().equals("igualdad") || preanalisis.getToken().equals("diferentes") || 
                   preanalisis.getToken().equals("mayor") || preanalisis.getToken().equals("menor") || 
                   preanalisis.getToken().equals("mayorIgual") || preanalisis.getToken().equals("menorIgual") ||
                   preanalisis.getToken().equals("pCierra")){

           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "., ==, !=, <, >, >=, <= o )");   
           }   
        }
    }
    public void CONDICIONAL(){
        if(!Error){
            if(preanalisis.getToken().equals("igualdad")){
                Emparejar("igualdad");
            }else if(preanalisis.getToken().equals("diferente")){
                Emparejar("diferente");
            }else if(preanalisis.getToken().equals("menor")){
                Emparejar("menor");
            }else if(preanalisis.getToken().equals("mayor")){
                Emparejar("mayor");
            }else if(preanalisis.getToken().equals("mayorIgual")){
                Emparejar("mayorIgual");
            }else if(preanalisis.getToken().equals("menorIgual")){
                Emparejar("menorIgual");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "==, !=, <, >, >= o <=");   
            }    
        }
    }
    
    public void MIENTRAS(){
        if(!Error){
           if(preanalisis.getToken().equals("PrMIENTRAS")){
               Emparejar("PrMIENTRAS");
               Emparejar("pAbre");
               CONDICION();
               Emparejar("pCierra");
               Emparejar("PrHACER");
               INSTRUCCIONES();
               Emparejar("PrFIN");
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "MIENTRAS");
           }   
        }
    }    
    
    public void ESCRIBE(){
        if(!Error){
            if(preanalisis.getToken().equals("PrESCRIBE")){
                Emparejar("PrESCRIBE");
                Emparejar("pAbre");
                CONT();
                Emparejar("pCierra");
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ESCRIBE");
            }   
        }
    }
    public void CONT(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                preanalisis = Preanalisis();
                while(!preanalisis.getToken().equals("comilla")){
                    preanalisis = Preanalisis();
                }
                Emparejar("comilla");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id o '");
            }    
        }
    }
    public void LEE(){
        if(!Error){
            if(preanalisis.getToken().equals("PrLEE")){
                Emparejar("PrLEE");
                Emparejar("pAbre");
                Emparejar("id");
                LEE1();
                Emparejar("pCierra");
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "LEE");
            }    
        }
    }
    public void LEE1(){
        if(preanalisis.getToken().equals(("punto"))){
            Emparejar("punto");
            Emparejar("id");
        }else if(preanalisis.getToken().equals("pCierra")){
        }else{
            ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), ". o )");
        }
    }
    
    public void EXP(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                OP1();
                Emparejar("asignacion");
                OP();
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "id");
            }    
        }
    }
    public void OP1(){
        if(!Error){
            if(preanalisis.getToken().equals("punto")){
                Emparejar("punto");
                Emparejar("id");
            }else if(preanalisis.getToken().equals("asignacion") || preanalisis.getToken().equals("puntoComa") || 
                    preanalisis.getToken().equals("mas") || preanalisis.getToken().equals("menos") ||
                    preanalisis.getToken().equals("entre") || preanalisis.getToken().equals("por") || preanalisis.getToken().equals("PrMOD")){

            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "., = o ;");
            }    
        }
    }
    public void OP(){
        if(!Error){
            if(preanalisis.getToken().equals("num")){
                Emparejar("num");
                EXP2();
            }else if(preanalisis.getToken().equals("id")){
                Emparejar("id");
                OP1();
                EXP2();
            }else if(preanalisis.getToken().equals("PrNULL")){
                Emparejar("PrNULL");
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                CAR();
                Emparejar("comilla");
            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "numero, id, ' o NULL");
            }    
        }
    }
    public void EXP2(){
        if(!Error){
            if(preanalisis.getToken().equals("PrMOD") || 
                    preanalisis.getToken().equals("mas") || preanalisis.getToken().equals("menos") ||
                    preanalisis.getToken().equals("entre") || preanalisis.getToken().equals("por")){
                OPERADOR();
                OP();
            }else if(preanalisis.getToken().equals("puntoComa")){

            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "MOD, +, -, * /");
            }   
        }
    }
    public void OPERADOR(){
        if(!Error){
            if(preanalisis.getToken().equals("PrMOD")){
                Emparejar("PrMOD");
            }else if(preanalisis.getToken().equals("mas")){
                Emparejar("mas");
            }else if(preanalisis.getToken().equals("menos")){
                Emparejar("menos");
            }else if(preanalisis.getToken().equals("entre")){
                Emparejar("entre");
            }else if(preanalisis.getToken().equals("por")){
                Emparejar("por");
            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "MOD, +, -, * /");
            }    
        }
    }
    public void ErrorSintactico(String lexema, int linea, String esperaba){
        this.resultado.append("Error Sintactico en la linea: "+ linea + " se encontró " + lexema + " y se esperaba: " + esperaba + "\n");
    }
    void Emparejar(String token){
        System.out.println("Token - " + token);
            System.out.println("Preanalisis - " + preanalisis.getToken());
        if(preanalisis.getToken().equals(token)){
            System.out.println(token);
            preanalisis = Preanalisis();
            //System.out.println("Token: " + preanalisis.getToken());
        }else{
            ErrorSintactico(preanalisis.lexema(), preanalisis.linea(),token);
            Error = true;
        }
    }
    
    //** ANALIZADOR SINTACTICO **\\
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea resultado;
    // End of variables declaration//GEN-END:variables
}
