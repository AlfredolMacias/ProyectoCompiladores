    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocomp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author Fredy-pc
 */
public class Interprete extends javax.swing.JFrame {

    /**
     * Creates new form Interprete
     */
    ArrayList<Character> chars = new ArrayList<Character>();
    int linea = 1;
    Token preanalisis = null;
    String lexema = "";
    StringBuilder sb = new StringBuilder();
    String content = "";
    String[] alfabeto = null;
    String[] estados = null;
    String[] palabrasRes = null;
    String[] estadosFinales = null;
    int cont = 0;
    boolean Error = false;
    ArrayList<Token> tokens = new ArrayList<Token>();
    File abre = null; 
    ArrayList<Transicion> transiciones = new ArrayList<Transicion>();
    int estadoActual = 0;
    HashMap<String,Variable> variables = new HashMap<String, Variable>();
    HashMap<String, Estructura> estructuras = new HashMap<String, Estructura>();
    public Interprete() {
        setExtendedState(MAXIMIZED_BOTH);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        resultado.setEditable(false);
        resultado.setColumns(20);
        resultado.setRows(5);
        jScrollPane2.setViewportView(resultado);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Ejecutar");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Cargar Lenguaje");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 324, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(68, 68, 68)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jButton1.setEnabled(true);
        automata();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        variables.clear();
        estructuras.clear();
        cont = 0;
        estadoActual= 0;
        linea = 1;
        content = jTextArea1.getText() + " ";
        preanalisis = Preanalisis();
        this.resultado.setText("");
        Error = false;
        A();
        if(preanalisis.getToken() != "finFichero"){
            ErrorSintactico(preanalisis.lexema(), preanalisis.linea(), "Fin de Fichero");
        }
        if(!Error && this.resultado.getText().equals("")){
            this.resultado.append("Interpretado correctamente");
        }
        NumEst();
        Mostrar();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interprete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interprete().setVisible(true);
            }
        });
        
        
    }
    
    //** AUTOMATA **\\
    public void automata(){
        String aux="";
        chars.clear();
        alfabeto = null;
        estados = null;
        estadosFinales = null;
        palabrasRes = null;
        transiciones.clear();
        this.resultado.setText("");
        //this.cadena.setText("");
        boolean AFD = true;
        int i = 0;
        try{
            File abre = new File("C:\\Users\\Fredy-pc\\Documents\\NetBeansProjects\\ProyectoComp\\src\\proyectocomp\\AutomataFinal.txt");
            if(abre != null){
                FileReader archivos=new FileReader(abre);
                BufferedReader lee=new BufferedReader(archivos);
                while((aux = lee.readLine()) != null){
                    switch (i) {
                        case 0:
                            //Alfabeto
                            alfabeto = aux.split(" ");
                            break;
                        case 1:
                            //Estados
                            estados = aux.split(" ");
                            break;
                        case 2:
                            //Estados finales
                            estadosFinales = aux.split(" ");
                            break;
                        case 3:
                            //Palabras Reservadas
                            palabrasRes = aux.split(" ");
                            break;
                        default:
                            //Transiciones
                            
                            String[] tran = aux.split(" ");
                            int actual = Integer.parseInt(tran[0]);
                            int siguiente = Integer.parseInt(tran[1]);
                            char simbolo = tran[2].charAt(0);
                            int retroceso = Integer.parseInt(tran[3]);
                            String nomToken = tran[4];
                            if(existe(actual,simbolo)){
                                System.out.println("ERROR: Automata no determinista: " + actual + simbolo);
                                AFD = false;
                                break;
                            }else{
                                this.transiciones.add(new Transicion(actual, siguiente, simbolo,retroceso,nomToken));
                            }
                            break;
                    }
                    i++;
                }
                if(AFD){
                    this.resultado.append("Automata correctamente ingresado");
                    //this.cadena.enable();
                }else{
                    this.resultado.append("Automata incorrecto");
                    //this.cadena.setText("");
                    //this.cadena.enable(false);
                }
                lee.close();
            }
        }catch(Exception e){
            System.out.println("Error: " + e); 
        }
    }
    public boolean existe(int actual, char simbolo){
        if(transiciones == null){
            return false;
        }else{
            for(Transicion e: transiciones){
                if(e.getActual() == actual && e.getSimbolo() == simbolo){
                    return true;
                }
            }
        }
        return false;
    }
    //** AUTOMATA **\\
    
    //** ANALIZADOR LEXICO **\\
    public Token Preanalisis(){
        aLexico();
        Token token = tokens.get(tokens.size() - 1);
        return token;
    } 
    public void aLexico(){
        if(cont < content.length()){
            char c = content.charAt(cont);
            if(Character.isDigit(c)){
                c = 'd';
            }else if(Character.isLetter(c)){
                c = 'l';
            }else if(Character.isWhitespace(c)){
                c = 'e';
                if(content.charAt(cont) == '\n' || content.charAt(cont) == '\r'){
                    linea++;
                }
            }
            estadoActual = existeTran(estadoActual,c);
            if(estadoActual == -2){
                this.resultado.setText("Error Léxico en la linea " + linea + ", no se reconoce el simbolo");
                System.out.println("Error en la linea: " + linea);
                tokens.add(new Token("Error", String.valueOf(c), linea));
                estadoActual = 0;
                Error = true;
            }else{
                if(c != 'e'){
                    chars.add(content.charAt(cont));
                }
                if(esFinal(estadoActual)){
                    int r = retroceso(estadoActual);
                    String nomToken = nomToken(estadoActual);
                    cont = cont - r;
                    estadoActual = 0;
                    if(r != 0){
                        chars.remove(chars.size() - 1);
                    }
                    for(char a:chars){
                        sb.append(a);
                    }
                    lexema = sb.toString();
                    if(nomToken.equals("id")){
                       if(esReservada(lexema)){
                            nomToken = "Pr" + lexema;
                        }
                    }
                    Token token1 = new Token(nomToken, lexema, linea);
                    tokens.add(token1);
                    sb.setLength(0);
                    chars.clear();
                    cont++;
                }else{                    
                    cont++;
                    aLexico();
                }
            }
        }else{
            Token token1 = new Token("finFichero", "$", linea);
            tokens.add(token1);
        }
    }
    public boolean esReservada(String id){
        for(int i = 0; i <= palabrasRes.length -1;i++){
            if(id.equals(palabrasRes[i])){
                return true;
            }
        }
        return false;
    }
    public int retroceso(int estadoActual){
        for(Transicion e: transiciones){
                if(e.getActual() == estadoActual){
                    return e.getRetroceso();
                }
            }
        return 0;
    }
    public boolean esFinal(int estado){
        for(int i = 0; i <= estadosFinales.length - 1; i++){
            if(estado == Integer.parseInt(estadosFinales[i])){
                return true;
            }
        }
        return false;
    }
    public int existeTran(int actual, char simbolo){
        if(transiciones == null){
            System.out.println("NO hay");
        }else{
            for(Transicion e: transiciones){
                //System.out.println("---Actual: " + e.getActual() + " Simbolo: " +  e.getSimbolo());
                if(e.getActual() == actual && e.getSimbolo() == simbolo){
                    return e.getSiguiente();
                }
            }
        }
        return -2;
    }
    public String nomToken(int estadoActual){
        for(Transicion t: transiciones){
            if(t.getActual() == estadoActual){
                return t.nomToken();
            }
        }
        return "";
    }
    //** ANALIZADOR LEXICO **\\
    
    //** ANALIZADOR SINTACTICO **\\
    public void A(){
        if(!Error){
            if(preanalisis.getToken().equals("PrPROGRAMA")){
                Emparejar("PrPROGRAMA");
                Emparejar("id");           
                CONSTANTES();           
                ESTRUCTURAS();            
                Emparejar("PrINICIO");            
                INSTRUCCIONES();            
                Emparejar("PrFIN");
                //Mostrar();
            }else{
                ErrorSintactico(preanalisis.lexema(), preanalisis.linea(), "PROGRAMA");
            }
        }
        
    }
    
    public void CONSTANTES(){
        if(!Error){
            if(preanalisis.getToken().equals("PrCONSTANTES")){
                Emparejar("PrCONSTANTES");
                String nomVar = preanalisis.lexema();
                Emparejar("id");
                Emparejar("asignacion");
                VALOR1(nomVar);
                CONST();
            }else if(preanalisis.getToken().equals("PrESTRUCTURAS") || preanalisis.getToken().equals("PrINICIO")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "CONSTANTES, ESTRUCTURAS O INICIO");
            }
        }
    }
    public void CONST(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String nomVar = preanalisis.lexema();
                Emparejar("id");
                Emparejar("asignacion");
                if(!variables.containsKey(nomVar)){
                    VALOR1(nomVar);
                }else{
                    ErrorSemantico(preanalisis.linea(), 1);
                }
                CONST();
            }else if(preanalisis.getToken().equals("PrESTRUCTURAS") || preanalisis.getToken().equals("PrINICIO")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, ESTRUCTURAS O INICIO");
            }
        }
    }
    public void VALOR1(String nomVar){
        if(!Error){
            if(preanalisis.getToken().equals("num")){
                int linea = preanalisis.linea();
                int valorVar = Integer.parseInt(preanalisis.lexema());
                Variable var = new Variable("CONSTANTE", valorVar, linea, "int");
                variables.put(nomVar, var);
                Emparejar("num");
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                CAR(nomVar);
                Emparejar("comilla");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "número o comilla");
            }
        }
    }
    public void CAR(){
        if(!Error){
            if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num")){
                if(preanalisis.lexema().length() == 1){
                    preanalisis = Preanalisis();
                }else{
                    ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "caracter");
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
    }
    public void CAR(String nomVar){
        if(!Error){
            if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num")){
                if(preanalisis.lexema().length() == 1){
                    int linea = preanalisis.linea();
                    String valorVar = preanalisis.lexema();
                    Variable var = new Variable("CONSTANTE", valorVar, linea, "String");
                    variables.put(nomVar, var);
                    preanalisis = Preanalisis();
                }else{
                    ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "caracter");
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
    }
    
    public void ESTRUCTURAS(){
        if(!Error){                    
            if(preanalisis.getToken().equals("PrESTRUCTURAS")){
                Emparejar("PrESTRUCTURAS");
                String nomEst = preanalisis.lexema();
                Emparejar("id");
                Emparejar("asignacion");
                Emparejar("lAbre");
                CAMPOS(nomEst);
                Emparejar("lCierra");
                EST2();
            }else if(preanalisis.getToken().equals("PrINICIO")){   
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ESTRUCTURAS O INICIO");
            }        
        }
    }
    public void EST2(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
               String estVar = preanalisis.lexema();
                Emparejar("id");
                ESTVAR(estVar);
            }else if(preanalisis.getToken().equals("PrINICIO")){  
                ErrorSemantico(preanalisis.linea(), 11);
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id O INICIO");
            }
        }
    }
    public void CAMPOS(String nomEst){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
            String tipo = TIPO();
            String nomCam = preanalisis.lexema();
            Emparejar("id");
            SEP(nomEst, tipo, nomCam);
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO O CARACTER");
            }
        }
    }
    public void SEP(String nomEst, String tipo, String nomCam){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO2(nomEst, tipo, nomCam);
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                String nomCam2 = preanalisis.lexema();               
                Emparejar("id");
                if(nomCam2.equals(nomCam)){
                    ErrorSemantico(preanalisis.linea(),3);
                }else{
                    SEP2(nomEst, tipo, nomCam, nomCam2);    
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }    
        }
    }
    public void CAMPO2(String nomEst, String tipo, String nomCam){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
                String tipo2 = TIPO();
                String nomCam2 = preanalisis.lexema();
                Emparejar("id");
                if(nomCam.equals(nomCam2)){
                    ErrorSemantico(preanalisis.linea(),3);
                }else{
                    SEP3(nomEst, tipo, nomCam, tipo2, nomCam2);
                }
            }else if(preanalisis.getToken().equals("lCierra")){
                String valor = "";
                if(tipo.equals("ENTERO")){
                    valor = "0";
                }else if(tipo.equals("CARACTER")){
                    valor = "''";
                }else if(tipo.equals("APUNTADOR")){
                    valor = "null";
                }
                Estructura est = new Estructura(nomCam, valor, tipo);
                estructuras.put(nomEst, est);
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER O }");
            }
        }
    }
    public void SEP2(String nomEst, String tipo, String nomCam, String nomCam2){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO3(nomEst, tipo, nomCam,tipo, nomCam2);
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                String nomCam3 = preanalisis.lexema();
                Emparejar("id");
                if(!nomCam3.equals(nomCam) || nomCam3.equals(nomCam2)){
                    String valor = "";
                    if(tipo.equals("ENTERO")){
                        valor = "0";
                    }else if(tipo.equals("CARACTER")){
                        valor = "''";
                    }else if(tipo.equals("APUNTADOR")){
                        valor = "null";
                    }
                    Estructura est = new Estructura(nomCam, valor,tipo,nomCam2, valor, tipo, nomCam3, valor, tipo);
                    estructuras.put(nomEst, est);
                    Emparejar("puntoComa");
                }else{
                    ErrorSemantico(preanalisis.linea(),3);
                }
                
                
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void SEP3(String nomEst, String tipo, String nomCam, String tipo2, String nomCam2){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa")){
                Emparejar("puntoComa");
                CAMPO3(nomEst, tipo, nomCam, tipo2, nomCam2);
            }else if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                String nomCam3 = preanalisis.lexema();                
                Emparejar("id");
                if(nomCam3.equals(nomCam) || nomCam3.equals(nomCam2)){
                    ErrorSemantico(preanalisis.linea(),3);
                }else{
                    String valor1 = "";
                    if(tipo.equals("ENTERO")){
                        valor1 = "0";
                    }else if(tipo.equals("CARACTER")){
                        valor1 = "''";
                    }else if(tipo.equals("APUNTADOR")){
                        valor1 = "null";
                    }
                    String valor2= "";
                    if(tipo2.equals("ENTERO")){
                        valor2 = "0";
                    }else if(tipo2.equals("CARACTER")){
                        valor2 = "''";
                    }else if(tipo2.equals("APUNTADOR")){
                        valor2 = "null";
                    }
                    Estructura est = new Estructura(nomCam, valor1, tipo, nomCam2, valor2, tipo2, nomCam3, valor2, tipo2);
                    estructuras.put(nomEst, est);
                    Emparejar("puntoComa");   
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void CAMPO3(String nomEst, String tipo, String nomCam, String tipo2, String nomCam2){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO") || preanalisis.getToken().equals("PrAPUNTADOR") || preanalisis.getToken().equals("PrCARACTER")){
                String tipo3 = TIPO();
                String nomCam3 = preanalisis.lexema();
                Emparejar("id");
                if(nomCam3.equals(nomCam) || nomCam3.equals(nomCam2)){
                    ErrorSemantico(preanalisis.linea(),3);
                }else{
                    String valor = "";
                    if(tipo.equals("ENTERO")){
                        valor = "0";
                    }else if(tipo.equals("CARACTER")){
                        valor = "''";
                    }else if(tipo.equals("APUNTADOR")){
                        valor = "null";
                    }
                    String valor2 = "";
                    if(tipo2.equals("ENTERO")){
                        valor2 = "0";
                    }else if(tipo2.equals("CARACTER")){
                        valor2 = "''";
                    }else if(tipo2.equals("APUNTADOR")){
                        valor2 = "null";
                    }
                    String valor3 = "";
                    if(tipo3.equals("ENTERO")){
                        valor3 = "0";
                    }else if(tipo3.equals("CARACTER")){
                        valor3 = "''";
                    }else if(tipo.equals("APUNTADOR")){
                        valor3 = "null";
                    }
                    Estructura est = new Estructura(nomCam, valor, tipo, nomCam2, valor2, tipo2, nomCam3, valor3, tipo3 );
                    estructuras.put(nomEst, est);
                    Emparejar("puntoComa");   
                }
            }else if(preanalisis.getToken().equals("lCierra")){
                String valor = "";
                if(tipo.equals("ENTERO")){
                    valor = "0";
                }else if(tipo.equals("CARACTER")){
                    valor = "''";
                }else if(tipo.equals("APUNTADOR")){
                    valor = "null";
                }
                String valor2 = "";
                    if(tipo2.equals("ENTERO")){
                        valor2 = "0";
                    }else if(tipo2.equals("CARACTER")){
                        valor2 = "''";
                    }else if(tipo2.equals("APUNTADOR")){
                        valor2 = "null";
                    }
                Estructura est = new Estructura(nomCam, valor, tipo, nomCam2, valor2, tipo2);
                estructuras.put(nomEst, est);
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER O }");
            }    
        }
    }
    public String TIPO(){
        if(!Error){
            if(preanalisis.getToken().equals("PrENTERO")){
                Emparejar("PrENTERO");
                return "ENTERO";
            }else if(preanalisis.getToken().equals("PrAPUNTADOR")){
                Emparejar("PrAPUNTADOR");
                return "APUNTADOR";
            }else if(preanalisis.getToken().equals("PrCARACTER")){
                Emparejar("PrCARACTER");
                return "CARACTER";
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ENTERO, APUNTADO, CARACTER");
            }
        }
        return "";
    }
    public void ESTVAR(String estVar){
        if(!Error){
            if(preanalisis.getToken().equals("asignacion")){
                //System.out.println(estructuras);
                if(estructuras.containsKey(estVar)){
                    ErrorSemantico(preanalisis.linea(),5);
                }else{
                    Emparejar("asignacion");
                    Emparejar("lAbre");
                    CAMPOS(estVar);
                    Emparejar("lCierra");
                    VAR3();
                }
            }else if(preanalisis.getToken().equals("id")){
                if(estructuras.containsKey(estVar)){
                    String var = preanalisis.lexema();
                    Emparejar("id");
                    if(variables.containsKey(var)){
                        ErrorSemantico(preanalisis.linea(),1);
                    }else{
                        Variable v = new Variable(estVar, "NULL", preanalisis.linea(),"ESTRUCTURA");
                        variables.put(var, v);
                        Estructura d = estructuras.get(estVar);
                        estructuras.put(var, d);
                        //Mostrar();
                        
                        VARIABLES(estVar);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(),6);
                }
                
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "asignacion o id");
            }            
        }  
    }
    public void VAR3(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String nomEst = preanalisis.lexema();
                Emparejar("id");
                if(estructuras.containsKey(nomEst)){
                   String Var = preanalisis.lexema();
                    Emparejar("id");
                    if(variables.containsKey(Var)){
                        ErrorSemantico(preanalisis.linea(),1);
                    }else{
                        Variable v = new Variable(nomEst, "", preanalisis.linea(),"ESTRUCTURA");
                        variables.put(Var, v);
                        Estructura d = estructuras.get(nomEst);
                        estructuras.put(Var, d);
                        VARIABLES(nomEst);
                    }
                }else{
                     ErrorSemantico(preanalisis.linea(),6);
                }
            }else if(preanalisis.getToken().equals("PrINICIO")){
                ErrorSemantico(preanalisis.linea(), 11);
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
    }
    public void VARIABLES(String nomEst){
        if(!Error){
            if(preanalisis.getToken().equals("puntoComa") || preanalisis.getToken().equals("coma")){
                VAR2(nomEst);
                Emparejar("puntoComa");
                VARIABLES2();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }
        }
    }
    public void VAR2(String nomEst){
        if(!Error){
            if(preanalisis.getToken().equals("coma")){
                Emparejar("coma");
                String nomVar = preanalisis.lexema();
                Emparejar("id");
                if(variables.containsKey(nomVar)){
                    ErrorSemantico(preanalisis.linea(),1);
                }else{
                    Variable v = new Variable(nomEst, "", preanalisis.linea(), "ESTRUCTURA" );
                    variables.put(nomVar, v);
                    Estructura d = estructuras.get(nomEst);
                    estructuras.put(nomVar, d);
                    //Mostrar();
                    VAR2(nomEst);   
                }
            }else if( preanalisis.getToken().equals("puntoComa")){
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ", O ;");
            }   
        }
    }
    public void VARIABLES2(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String nomEst = preanalisis.lexema();
                Emparejar("id");
                if(estructuras.containsKey(nomEst)){
                    String nomVar = preanalisis.lexema();
                    Emparejar("id");
                    if(variables.containsKey(nomVar)){
                        ErrorSemantico(preanalisis.linea(),1);
                    }else{
                        Variable v = new Variable(nomEst, "",preanalisis.linea(), "ESTRUCTURA");
                        variables.put(nomVar, v);
                        VAR2(nomEst);
                        Estructura d = estructuras.get(nomEst);
                        estructuras.put(nomVar, d);
                        //Mostrar();
                        Emparejar("puntoComa");
                        VARIABLES2();   
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(),6);
                }
                
            }else if(preanalisis.getToken().equals("PrINICIO")){
                buscarVariable();
            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "id O INICIO");
            }    
        }
    }
    
    public void INSTRUCCIONES(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI") || preanalisis.getToken().equals("PrMIENTRAS") || 
                    preanalisis.getToken().equals("PrESCRIBE") || preanalisis.getToken().equals("PrLEE") ||
                    preanalisis.getToken().equals("id")){
                INSTRUCCION();
                INSTRUCCIONES();
            }else if(preanalisis.getToken().equals("PrFIN") || preanalisis.getToken().equals("PrSINO")){

            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI, MIENTRAS, ESCRIBE, LEE, id o FIN");
            }    
        }
    }
    public void INSTRUCCION(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI")){
                SI();
            }else if(preanalisis.getToken().equals("PrMIENTRAS")){
                MIENTRAS();
            }else if(preanalisis.getToken().equals("PrESCRIBE")){
                ESCRIBE();
            }else if(preanalisis.getToken().equals("PrLEE")){
                LEE();
            }else if(preanalisis.getToken().equals("id")){
                EXP();
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI, MIENTRAS, ESCRIBE, LEE, id o FIN");
            }    
        }
    }
    
    public void SI(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSI")){
                Emparejar("PrSI");
                Emparejar("pAbre");
                CONDICION();
                Emparejar("pCierra");
                Emparejar("PrENTONCES");
                INSTRUCCIONES();
                SINO();
                Emparejar("PrFIN");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SI");
            }
        }
    }
    public void SINO(){
        if(!Error){
            if(preanalisis.getToken().equals("PrSINO")){
                Emparejar("PrSINO");
                INSTRUCCIONES();
            }else if(preanalisis.getToken().equals("PrFIN")){
                
            }
            else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "SINO");
            }    
        }
    }
    
    public void CONDICION(){
        if(!Error){
        if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num") || preanalisis.getToken().equals("comilla")){
                String v1 = VARCON();
                CONDICIONAL();
                String v2 = VARCON1();
                //System.out.println("V1: " + v1 + " -- V2" + v2);
                if(!v1.equals(v2)){
                    ErrorSemantico(preanalisis.linea(), 8);
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, num, o '");   
            }   
        }
    }
    public String VARCON(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String est = preanalisis.lexema();
                Emparejar("id");
                String var = AP();
                if(!var.equals("")){
                    if(variables.containsKey(est)){
                        if(variables.get(est).tipo2().equals("ESTRUCTURA")){
                            if(estructuras.containsKey(est)){
                                String buscar = buscarCampo(variables.get(est).getTipo(), var);
                                if(buscar.equals("Error")){
                                    ErrorSemantico(preanalisis.linea(),4);
                                }else{
                                    String tip = buscarTipo(variables.get(est).getTipo(), var);
                                   // System.out.println("TIPO " + tip);
                                    if(tip.equals("ENTERO")){
                                        return "int";
                                    }else if(tip.equals("CARACTER")){
                                        return "String";
                                    }else{
                                        return buscarTipo(est, var);
                                    }
                                }
                            }else{
                                ErrorSemantico(preanalisis.linea(),6);
                            }    
                        }else if(variables.get(est).tipo2().equals("int")){
                            return "int";
                        }else{
                            ErrorSemantico(preanalisis.linea(),8);    
                        }
                    }else{
                        ErrorSemantico(preanalisis.linea(),6);    
                    }
                }else{
                    if(variables.containsKey(est)){
                        return variables.get(est).tipo2();
                    }else{
                        ErrorSemantico(preanalisis.linea(),2);
                    }
                }
            }else if(preanalisis.getToken().equals("num")){
                Emparejar("num");
                return "int";
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                CAR();
                Emparejar("comilla");
                return "String";
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, num, o '");   
            }   
        }
        return "Error";
    }
    public String VARCON1(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String est = preanalisis.lexema();
                Emparejar("id");
                String var = AP();
                if(!var.equals("")){
                    if(variables.containsKey(est)){
                        if(variables.get(est).tipo2().equals("ESTRUCTURA")){
                            if(estructuras.containsKey(est)){
                                String buscar = buscarCampo(est, var);
                                if(buscar.equals("Error")){
                                    ErrorSemantico(preanalisis.linea(),4);
                                }else{
                                    String tip = buscarTipo(est, var);
                                    //System.out.println("TIPO " + tip);
                                    if(tip.equals("ENTERO")){
                                        return "int";
                                    }else if(tip.equals("CARACTER")){
                                        return "String";
                                    }else{
                                        return buscarTipo(est, var);
                                    }
                                }
                            }else{
                                ErrorSemantico(preanalisis.linea(),6);
                            }    
                        }else if(variables.get(est).tipo2().equals("int")){
                            return "int";
                        }else{
                            ErrorSemantico(preanalisis.linea(),8);    
                        }
                    }else{
                        ErrorSemantico(preanalisis.linea(),6);    
                    }
                }else{
                    if(variables.containsKey(est)){
                        return variables.get(est).tipo2();
                    }else{
                        ErrorSemantico(preanalisis.linea(),2);
                    }
                }
            }else if(preanalisis.getToken().equals("num")){
                Emparejar("num");
                return "int";
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                CAR();
                Emparejar("comilla");
                return "String";
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id, num, o '");   
            }   
        }
        return "Error";
    }
    public String AP(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");         
               String var = preanalisis.lexema();
               Emparejar("id");
               return var;
           }else if(preanalisis.getToken().equals("igualdad") || preanalisis.getToken().equals("diferentes") || 
                   preanalisis.getToken().equals("mayor") || preanalisis.getToken().equals("menor") || 
                   preanalisis.getToken().equals("mayorIgual") || preanalisis.getToken().equals("menorIgual") ||
                   preanalisis.getToken().equals("pCierra")){
               
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "., ==, !=, <, >, >=, <= o )");   
           }   
        }
        return "";
    } 
//ESTRUCTURAS
    public void CONDICIONAL(){
        if(!Error){
            if(preanalisis.getToken().equals("igualdad")){
                Emparejar("igualdad");
            }else if(preanalisis.getToken().equals("diferente")){
                Emparejar("diferente");
            }else if(preanalisis.getToken().equals("menor")){
                Emparejar("menor");
            }else if(preanalisis.getToken().equals("mayor")){
                Emparejar("mayor");
            }else if(preanalisis.getToken().equals("mayorIgual")){
                Emparejar("mayorIgual");
            }else if(preanalisis.getToken().equals("menorIgual")){
                Emparejar("menorIgual");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "==, !=, <, >, >= o <=");   
            }    
        }
    }
    public String buscarCampo(String est, String var){
        if(estructuras.get(est).getCampo1().equals(var)){
            return estructuras.get(est).getValor1();
        }else if(estructuras.get(est).getCampo2().equals(var)){
            return estructuras.get(est).getValor2();
        }else if(estructuras.get(est).getCampo3().equals(var)){
            return estructuras.get(est).getValor3();
        }else{
            return "Error";
        }
    }
    public String buscarTipo(String est, String var){
        if(estructuras.get(est).getCampo1().equals(var)){
            return estructuras.get(est).getTipo1();
        }
        if(estructuras.get(est).getCampo2() != null){
            if(estructuras.get(est).getCampo2().equals(var)){
                return estructuras.get(est).getTipo2();
            }
        }
        if(estructuras.get(est).getCampo3() != null){
            if(estructuras.get(est).getCampo2().equals(var)){
                return estructuras.get(est).getTipo3();
            }
        }
        ErrorSemantico(preanalisis.linea(), 2);
        return "Error";
    }
    public void actualizarValor(String est, String var, String valor){
        if(estructuras.get(est).getCampo1().equals(var)){
            //System.out.println("EST: " + est + "   VAR: " + var + "   VALOR: " + valor);
            if(estructuras.get(est).getCampo2() != null){
                if(estructuras.get(est).getCampo3() != null){
                    Estructura e = new Estructura(estructuras.get(est).getCampo1(), valor, estructuras.get(est).getTipo1(),estructuras.get(est).getCampo2(), estructuras.get(est).getValor2(), estructuras.get(est).getTipo2(),estructuras.get(est).getCampo3(), estructuras.get(est).getValor3(), estructuras.get(est).getTipo3());
                    estructuras.put(est, e);
                }else{
                    Estructura e = new Estructura(estructuras.get(est).getCampo1(), valor, estructuras.get(est).getTipo1(),estructuras.get(est).getCampo2(), estructuras.get(est).getValor2(), estructuras.get(est).getTipo2());
                    estructuras.put(est, e);
                }
            }else{
                    Estructura e = new Estructura(estructuras.get(est).getCampo1(), valor, estructuras.get(est).getTipo1());
                    estructuras.put(est, e);
            }
            //estructuras.get(est).setValor1(valor);
        }else if(estructuras.get(est).getCampo2().equals(var)){
            //System.out.println("EST: " + est + "   VAR: " + var + "   VALOR: " + valor);
            if(estructuras.get(est).getCampo3() != null){
                    Estructura e = new Estructura(estructuras.get(est).getCampo1(), estructuras.get(est).getValor1(), estructuras.get(est).getTipo1(),estructuras.get(est).getCampo2(),valor, estructuras.get(est).getTipo2(),estructuras.get(est).getCampo3(), estructuras.get(est).getValor3(), estructuras.get(est).getTipo3());
                    estructuras.put(est, e);
                }else{
                    Estructura e = new Estructura(estructuras.get(est).getCampo1(), estructuras.get(est).getValor1() , estructuras.get(est).getTipo1(),estructuras.get(est).getCampo2(), valor, estructuras.get(est).getTipo2());
                    estructuras.put(est, e);
                }
            //estructuras.get(est).setValor2(valor);
        }else if(estructuras.get(est).getCampo3().equals(var)){
                //System.out.println("EST: " + est + "   VAR: " + var + "   VALOR: " + valor);            
                Estructura e = new Estructura(estructuras.get(est).getCampo1(), estructuras.get(est).getValor1(), estructuras.get(est).getTipo1(),estructuras.get(est).getCampo2(),estructuras.get(est).getValor2(), estructuras.get(est).getTipo2(),estructuras.get(est).getCampo3(), valor, estructuras.get(est).getTipo3());
                estructuras.put(est, e);            
//estructuras.get(est).setValor3(valor);
        }else{
            ErrorSemantico(preanalisis.linea(), 4);
        }
    }
    
    public void MIENTRAS(){
        if(!Error){
           if(preanalisis.getToken().equals("PrMIENTRAS")){
               Emparejar("PrMIENTRAS");
               Emparejar("pAbre");
               CONDICION();
               Emparejar("pCierra");
               Emparejar("PrHACER");
               INSTRUCCIONES();
               Emparejar("PrFIN");
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "MIENTRAS");
           }   
        }
    }    
    
    public void ESCRIBE(){
        if(!Error){
            if(preanalisis.getToken().equals("PrESCRIBE")){
                Emparejar("PrESCRIBE");
                Emparejar("pAbre");
                String cont = CONT();
                Emparejar("pCierra");
                Emparejar("puntoComa");
                if(!Error){
                    this.resultado.append(cont + " ");
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "ESCRIBE");
            }   
        }
    }
    public String CONT(){
        if(!Error){
            if(preanalisis.getToken().equals("id")){
                String VarEst = preanalisis.lexema();
                Emparejar("id");
                String var = APCONT();
                if(var.equals("")){
                    if(variables.containsKey(VarEst)){
                        if(!variables.get(VarEst).tipo2().equals("ESTRUCTURA")){
                            if(variables.get(VarEst).tipo2().equals("int")){
                                return String.valueOf(variables.get(VarEst).getValorInt());
                            }else{
                                return variables.get(VarEst).getValor();
                            }
                        }else{
                            ErrorSemantico(preanalisis.linea(), 9);
                        }
                        
                    }else{
                        ErrorSemantico(preanalisis.linea(), 2);
                    }
                }else{
                    if(variables.containsKey(VarEst)){
                        if(estructuras.containsKey(VarEst)){
                            return buscarCampo(VarEst, var);
                        }else{
                            ErrorSemantico(preanalisis.linea(), 6);
                        }
                    }else{
                        ErrorSemantico(preanalisis.linea(), 6);
                    }
                    
                }
            }else if(preanalisis.getToken().equals("comilla")){
                Emparejar("comilla");
                String cadena = "";
                while(!preanalisis.getToken().equals("comilla")){
                    cadena = cadena + " " + preanalisis.lexema();
                    preanalisis = Preanalisis();
                }
                Emparejar("comilla");
                return cadena;
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id o '");
            }    
        }
        return "";
    }
    public String APCONT(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");         
               String var = preanalisis.lexema();
               Emparejar("id");
               return var;
           }else if(preanalisis.getToken().equals("pCierra")){
               
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ". o )");   
           }   
        }
        return "";
    }
    public void LEE(){
        if(!Error){
            if(preanalisis.getToken().equals("PrLEE")){
                Emparejar("PrLEE");
                Emparejar("pAbre");
                Emparejar("id");
                LEE1();
                Emparejar("pCierra");
                Emparejar("puntoComa");
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "LEE");
            }    
        }
    }
    public void LEE1(){
        if(preanalisis.getToken().equals(("punto"))){
            Emparejar("punto");
            Emparejar("id");
        }else if(preanalisis.getToken().equals("pCierra")){
        }else{
            ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), ". o )");
        }
    }
    
    public void EXP(){
        if(preanalisis.getToken().equals("id")){
            String varAsi = preanalisis.lexema();
            Emparejar("id");
            String varOpc = AP1();
            Emparejar("asignacion");
            OP1(varAsi, varOpc);
            Emparejar("puntoComa");
        }else{
            ErrorSintactico(preanalisis.getToken(), preanalisis.linea()," id");
        }
    }
    public void OP1(String varAsi, String varOpc){
        if(preanalisis.getToken().equals("num")){
            int operador1 = Integer.parseInt(preanalisis.lexema());
            Emparejar("num");
            OP2Int(varAsi, varOpc, operador1);
        }else if(preanalisis.getToken().equals("id")){
            String operador1 = preanalisis.lexema();
            Emparejar("id");
            String operador1Est = AP2();
            if(operador1Est.equals("")){
                if(variables.containsKey(operador1)){
                    if(variables.get(operador1).tipo2().equals("int")){
                        String buscar = buscarTipo(varAsi, varOpc);
                        if(buscar.equals("ENTERO")){
                            int operador1Int = variables.get(operador1).getValorInt();
                            OP2Int(varAsi, varOpc, operador1Int);   
                        }else{
                            ErrorSemantico(preanalisis.linea(), 8);
                        }
                        
                    }else{
                        if(variables.containsKey(operador1)){
                            if(variables.get(operador1).tipo2().equals("ESTRUCTURA")){
                                if(varOpc.equals("")){
                                    ErrorSemantico(preanalisis.linea(), 8);
                                }else{
                                    String buscar = buscarTipo(varAsi, varOpc);
                                    if(buscar.equals("APUNTADOR")){
                                        actualizarValor(varAsi, varOpc, operador1);
                                    }else{
                                        ErrorSemantico(preanalisis.linea(), 8);
                                    }
                                }
                            }else{
                                String buscar = buscarTipo(varAsi, varOpc);
                                System.out.println("JBDKJBDLD " + buscar);
                                if(buscar.equals("CARACTER")){
                                    OP2String(varAsi, varOpc, variables.get(operador1).getValor());
                                }else{
                                    ErrorSemantico(preanalisis.linea(),8);
                                }
                                
                            }
                        }else{
                            ErrorSemantico(preanalisis.linea(), 2);
                        }
                        
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 2);
                }
            }else{
                if(estructuras.containsKey(operador1)){
                    String buscar = buscarCampo(operador1, operador1Est);
                    if(buscar.equals("Error")){
                        ErrorSemantico(preanalisis.linea(),4);
                    }else{
                        String tipo = buscarTipo(operador1, operador1Est);
                        if(tipo.equals("ENTERO")){
                            String tipo2 = buscarTipo(varAsi, varOpc);
                            if(tipo2.equals("ENTERO")){
                                if(buscar.equals("")){
                                    OP2Int(varAsi, varOpc, 0);
                                }else{
                                    OP2Int(varAsi, varOpc, Integer.parseInt(buscar));
                                }
                            }else{
                                ErrorSemantico(preanalisis.linea(), 8);
                            }
                            
                            
                        }else if(tipo.equals("CARACTER")){
                            OP2String(varAsi, varOpc, buscar);
                        }else{
                            ErrorSemantico(preanalisis.linea(), 8);
                        }
                        
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 6);
                }
            }
        }else if(preanalisis.getToken().equals("PrNULL")){
            if(varOpc.equals("")){
                /*if(variables.containsKey(varAsi)){
                    if(variables.get(varAsi).tipo2().equals("ESTRUCTURA")){
                        Emparejar("PrNULL");    
                        variables.get(varAsi).setValorString("NULL");
                    }else{
                        ErrorSemantico(preanalisis.linea(), 7);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(),2);
                }*/
                ErrorSemantico(preanalisis.linea(), 8);
            }else{
                //Mostrar();
//                System.out.println(variables.get(varAsi).getTipo());
//                System.out.println(varAsi);
                if(variables.containsKey(varAsi)){
                    if(estructuras.containsKey(varAsi)){
                        String tipo = buscarTipo(varAsi, varOpc);
                        if(tipo.equals("APUNTADOR")){
                            Emparejar("PrNULL");
                            actualizarValor(varAsi, varOpc, "NULL");
                        }else{
                            ErrorSemantico(preanalisis.linea(), 8);
                        }
                    }else{
                        ErrorSemantico(preanalisis.linea(),6);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 6);
                }
                
            }
            
            
        }else if(preanalisis.getToken().equals("comilla")){
            Emparejar("comilla");
            String c = CAREXP(varAsi, varOpc);
            if(varOpc.equals("")){
                if(variables.containsKey(varAsi) && (variables.get(varAsi).getTipo().equals("CONSTANTE") || variables.get(varAsi).tipo2().equals("ESTRUCTURA"))){
                    ErrorSemantico(preanalisis.linea(), 1);
                }else{
                    Variable v = new Variable("VARIABLE", c, preanalisis.linea(), "String");
                    variables.put(varAsi, v);
                }
            }else{
                if(estructuras.containsKey(varAsi)){
                    String tipo = buscarTipo(variables.get(varAsi).getTipo(), varOpc);
                    if(tipo.equals("CARACTER")){
                        actualizarValor(varAsi, varOpc, c);
                    }else{
                        ErrorSemantico(preanalisis.linea(), 7);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 6);
                }
            }
            Emparejar("comilla");
        }else{
            ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "número, id o null");
        }
    }
    public void OP2Int(String varAsi, String varOpc, int operador1){
        if(preanalisis.getToken().equals("mas") || preanalisis.getToken().equals("menos") ||
                    preanalisis.getToken().equals("entre") || preanalisis.getToken().equals("por") || preanalisis.getToken().equals("PrMOD")){
            int op = OPERADOR();
            int op3 = OP3();
            int res = OPERACION(operador1, op, op3);
            if(varOpc.equals("")){
                Variable v = new Variable("VARIABLE", res, preanalisis.linea(), "int" );
                variables.put(varAsi, v);
            }else{
                if(estructuras.containsKey(varAsi)){                    
                    String tipo = buscarTipo(variables.get(varAsi).getTipo(), varOpc);
                    if(tipo.equals("ENTERO")){
                        actualizarValor(varAsi, varOpc, String.valueOf(res));
                    }else{
                        ErrorSemantico(preanalisis.linea(), 8);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 6);
                }
            }                
        }else if(preanalisis.getToken().equals("puntoComa")){
            if(varOpc.equals("")){
                if(variables.containsKey(varAsi) && (variables.get(varAsi).getTipo().equals("CONSTANTE") || variables.get(varAsi).tipo2().equals("ESTRUCTURA"))){
                    ErrorSemantico(preanalisis.linea(), 1);
                }else{
                    Variable v = new Variable("VARIABLE", operador1, preanalisis.linea(), "int" );
                    variables.put(varAsi, v);
                }
            }else{
                if(variables.containsKey(varAsi) && (variables.get(varAsi).getTipo().equals("CONSTANTE") || variables.get(varAsi).getTipo().equals("ESTRUCTURA"))){
                    ErrorSemantico(preanalisis.linea(), 1); 
                }else{
                    if(variables.containsKey(varAsi)){
                        if(buscarTipo(variables.get(varAsi).getTipo(), varOpc).equals("ENTERO")){
                            actualizarValor(varAsi, varOpc, String.valueOf(operador1));
                        }else{
                            ErrorSemantico(preanalisis.linea(), 8);
                        }
                    }else{
                        ErrorSemantico(preanalisis.linea(), 2);
                    }
                }
            }
        }else{
            ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "operador o ;");
        }
    }
    public int OPERACION(int op1, int opcion, int op2){
        switch(opcion){
            case 1:
                return op1 + op2;
            case 2:
                return op1 - op2;
            case 3:
                return op1 * op2;
            case 4:
                return op1 / op2;
            case 5:
                return op1 % op2;
            default:
                ErrorSemantico(preanalisis.linea(), 8);
        }
        return 0;
    }
    public void OP2String(String varAsi, String varOpc, String operador1){
        if(preanalisis.getToken().equals("mas") || preanalisis.getToken().equals("menos") ||
                    preanalisis.getToken().equals("entre") || preanalisis.getToken().equals("por") || preanalisis.getToken().equals("PrMOD")){
            int operador = OPERADOR();
            if(operador != 0){
                ErrorSemantico(preanalisis.linea(), 10);
            }
            OP3();
        }else if(preanalisis.getToken().equals("puntoComa")){
                Variable v = new Variable("VARIABLE", operador1, preanalisis.linea(), "String");
                variables.put(varAsi, v);
        }else{
            ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "operador o ;");
        }
    }
    public int OP3(){
        if(preanalisis.getToken().equals("id")){
            String operador1 = preanalisis.lexema();
            Emparejar("id");
            String operador1Est = AP3();
            if(operador1Est.equals("")){
                if(variables.containsKey(operador1)){
                    if(variables.get(operador1).tipo2().equals("int")){
                        int operador1Int = variables.get(operador1).getValorInt();
                        return operador1Int;
                    }else{
                        ErrorSemantico(preanalisis.linea(), 8);
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 2);
                }
            }else{
                if(estructuras.containsKey(operador1)){
                    String buscar = buscarCampo(operador1, operador1Est);
                    if(buscar.equals("Error")){
                        ErrorSemantico(preanalisis.linea(),4);
                    }else{
                        if(estructuras.containsKey(operador1)){
                            String tipo = buscarTipo(operador1, operador1Est);
                            if(tipo.equals("ENTERO")){
                                return Integer.parseInt(buscar);
                            }else{
                                ErrorSemantico(preanalisis.linea(), 8);
                            }
                        }else{
                            ErrorSemantico(preanalisis.linea(), 6);
                        }
                    }
                }else{
                    ErrorSemantico(preanalisis.linea(), 6);
                }
            }
        }else if(preanalisis.getToken().equals("num")){
             int operador1 = Integer.parseInt(preanalisis.lexema());
            Emparejar("num");
            return operador1;
        }else{
            ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id o número");
        }
        return 0;
    }
    public int OPERADOR(){
        if(!Error){
            if(preanalisis.getToken().equals("PrMOD")){
                Emparejar("PrMOD");
                return 5;
            }else if(preanalisis.getToken().equals("mas")){
                Emparejar("mas");
                return 1;
            }else if(preanalisis.getToken().equals("menos")){
                Emparejar("menos");
                return 2;
            }else if(preanalisis.getToken().equals("entre")){
                Emparejar("entre");
                return 4;
            }else if(preanalisis.getToken().equals("por")){
                Emparejar("por");
                return 3;
            }else{
                ErrorSintactico(preanalisis.getToken(),preanalisis.linea(), "MOD, +, -, * /");
            }    
        }
        return 0;
    }
    public String AP1(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");         
               String var = preanalisis.lexema();
               Emparejar("id");
               return var;
           }else if(preanalisis.getToken().equals("asignacion")){
               
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ". o =");   
           }   
        }
        return "";
    }
    public String AP2(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");         
               String var = preanalisis.lexema();
               Emparejar("id");
               return var;
           }if(preanalisis.getToken().equals("mas") || preanalisis.getToken().equals("menos") ||
                    preanalisis.getToken().equals("entre") || preanalisis.getToken().equals("por") || 
                    preanalisis.getToken().equals("PrMOD") || preanalisis.getToken().equals("puntoComa")){
               
           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ". , + , -,  /, * o MOD");   
           }   
        }
        return "";
    }
    public String AP3(){
        if(!Error){
           if(preanalisis.getToken().equals("punto")){
               Emparejar("punto");         
               String var = preanalisis.lexema();
               Emparejar("id");
               return var;
           }else if(preanalisis.getToken().equals("puntoComa")){

           }else{
               ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), ". o ;");   
           }   
        }
        return "";
    }
    public String CAREXP(String varAsi, String varOpc){
        if(!Error){
            if(preanalisis.getToken().equals("id") || preanalisis.getToken().equals("num")){
                if(preanalisis.lexema().length() == 1){
                    String valorVar = preanalisis.lexema();
                    preanalisis = Preanalisis();
                    return valorVar;
                }else{
                    ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "caracter");
                }
            }else{
                ErrorSintactico(preanalisis.getToken(), preanalisis.linea(), "id");
            }
        }
        return "";
    }
    
    public void Emparejar(String token){
        if(!Error){
            if(preanalisis.getToken().equals(token)){
                preanalisis = Preanalisis();
            }else{
                ErrorSintactico(preanalisis.lexema(), preanalisis.linea(),token);
                Error = true;
            }
        }
    }
    public void ErrorSintactico(String lexema, int linea, String esperaba){
        if(!Error){
            this.resultado.setText("Error Sintactico en la linea: "+ linea + " se encontró " + lexema + " y se esperaba: " + esperaba + "\n");
            Error = true;
        }
    }
    public void ErrorSemantico(int linea, int tipo){
        if(!Error){
            switch(tipo){
                case 1:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - la variable ya existe\n");
                    break;
                case 2:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - la variable no existe\n");
                    break;
                case 3:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - el campo ya existe\n");
                    break;
                case 4:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - el campo no existe\n");
                    break;
                case 5:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - la estructura ya existe\n");
                    break;
                case 6:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - la estructura NO existe\n");
                    break;
                case 7:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - la variable no es de tipo ESTRUCTURA\n");
                    break;
                case 8:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - los tipos no coinciden\n");
                    break;
                case 9:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - no se puede escribir una variable de tipo estructura\n");
                    break;
                case 10:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - no se pueden realizar operaciones con esos tipos de datos\n");
                    break;
                case 11:
                    this.resultado.append("\nError Semantico en la linea " + linea + " - se debe declara al menos una varible de tipo estructura para cada estructura existente\n");
                    break;
                default: 
                    this.resultado.append("\nError Semantico en la linea " + linea);
                    break;
            }
            
            Error = true;   
        }
    }
    
    public void buscarVariable(){
        boolean encontro = false;
        boolean encontro2 = false;
        int i = 0;
        for(Map.Entry<String, Estructura> entry: estructuras.entrySet()){
            if(!variables.containsKey(entry.getKey())){
                i++;
                for(Map.Entry<String, Variable> entry2: variables.entrySet()){
                    if(i == 1){
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            encontro = true;
                        }
                    }else{
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            encontro2 = true;
                        }    
                    }
                }    
            }
            
        }
        if(i == 1 && encontro == false){
            ErrorSemantico(preanalisis.linea(), 11);
        }
        if(i > 1 && (encontro == false || encontro2 == false)){
            ErrorSemantico(preanalisis.linea(), 11);
            
        }
    }
    public void Mostrar(){
        System.out.println("\n\n ----- HASH MAP ----");
        for(Map.Entry<String, Estructura> entry: estructuras.entrySet()){
            System.out.println("Key: " + entry.getKey() + " Valor: " + entry.getValue().getValor1());
        }
    }
    public void NumEst(){
        int est1 = 0;
        int est2 = 0;
        int i = 0;
       for(Map.Entry<String, Estructura> entry: estructuras.entrySet()){
           System.out.println("Key: " + entry.getKey());
           if(!variables.containsKey(entry.getKey())){
                i++;
                for(Map.Entry<String, Variable> entry2: variables.entrySet()){
                    if(i == 1){
                       // System.out.println("ENtry: " + entry2.getValue().getTipo());
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            est1++;
                            if(entry.getValue().getCampo2() != null){
                                if(entry.getValue().getCampo3() != null){
                                    //campo = 3
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                            //entry.getValue().getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                    String valor3 = estructuras.get(entry2.getKey()).getValor3();
                                    System.out.println(" Valor1: " + valor1);
                                }else{
                                    //campo = 2
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                    System.out.println(" Valor1: " + valor1);
                                }
                            }else{
                                //campo = 1
                                String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                System.out.println(" Valor1: " + valor1);
                            }
                        }
                    }else{
                        //System.out.println("ENtry: " + entry2.getValue().getTipo());
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            //encontro2 = true;
                            est2++;
                            if(entry.getValue().getCampo2() != null){
                                if(entry.getValue().getCampo3() != null){
                                    //campo = 3
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                    String valor3 = estructuras.get(entry2.getKey()).getValor3();
                                }else{
                                    //campo = 2
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                }
                            }else{
                                //campo = 1
                                String valor1 = estructuras.get(entry2.getKey()).getValor1();
                            }
                        }    
                    }
                }    
            }else{
               //System.out.println("jbc: " + variables.get(entry.getKey()).tipo2());
                if(!variables.get(entry.getKey()).tipo2().equals("ESTRUCTURA")){
                  i++;
                for(Map.Entry<String, Variable> entry2: variables.entrySet()){
                    if(i == 1){
                        //System.out.println("ENtry: " + entry2.getValue().getTipo() + "  - i:  " + i);
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            if(entry.getValue().getCampo2() != null){
                                if(entry.getValue().getCampo3() != null){
                                    //campo = 3
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                    String valor3 = estructuras.get(entry2.getKey()).getValor3();
                                }else{
                                    //campo = 2
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                }
                            }else{
                                //campo = 1
                                String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                System.out.println(" Valor1: " + valor1);
                            }
                        }
                    }else{
                        //System.out.println("ENtry: " + entry2.getValue().getTipo());
                       // System.out.println("ENtry: " + entry.getKey() + " ENTRY2: " + entry2.getKey()+" - i:  " + i);
                        if(entry2.getValue().getTipo().equals(entry.getKey())){
                            //encontro2 = true;
                            est2++;
                            if(entry.getValue().getCampo2() != null){
                                if(entry.getValue().getCampo3() != null){
                                    //campo = 3
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                    String valor3 = estructuras.get(entry2.getKey()).getValor3();
                                }else{
                                    //campo = 2
                                    String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                    String valor2 = estructuras.get(entry2.getKey()).getValor2();
                                }
                            }else{
                                //campo = 1
                                String valor1 = estructuras.get(entry2.getKey()).getValor1();
                                System.out.println(" Valor1: " + valor1);
                            }
                        }    
                    }
                }   
                }
           }
        }
       //System.out.println("i: " + i + "NUM 1: "  + est1 + "  -  NUM 2: " + est2);
    }
    public void NumCampos(){
        int est1 = 0;
        int est2 = 0;
        int i = 0;
        for(Map.Entry<String, Estructura> entry: estructuras.entrySet()){
         //   System.out.println("ENtry: " + entry.getKey());
            if(variables.containsKey(entry.getKey())){
                i++;
                if(entry.getValue().getCampo2() != null){
                    if(entry.getValue().getCampo3() != null){
                        //numCampos = 3;
                    }else{
                      //  numCampos = 2;
                    }
                }else{
                    //numCampos = 1;
                }
            }
        }
       System.out.println("NUM 1: "  + est1 + "  -  NUM 2: " + est2);
    }
    //** ANALIZADOR SINTACTICO **\\
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea resultado;
    // End of variables declaration//GEN-END:variables
}
